package com.bank.account.model.mapper;

import com.bank.account.model.dto.AccountDto;
import com.bank.account.model.dto.AccountStatus;
import com.bank.account.model.dto.AccountType;
import com.bank.account.model.dto.AccountUpdateRequest;
import com.bank.account.model.entity.Account;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.assertThat;

class AccountMapperTest {

    private AccountMapper accountMapper;

    @BeforeEach
    void setUp() {
        // We test the generated implementation
        accountMapper = new AccountMapperImpl();
    }

    @Test
    void whenToDto_withValidEntity_shouldReturnCorrectDto() {
        // Arrange
        Account entity = new Account();
        entity.setId(1L);
        entity.setCustomerId(1234567L);
        entity.setType(AccountType.SAVINGS);
        entity.setBalance(1000.0);
        entity.setStatus(AccountStatus.ACTIVE);


        // Act
        AccountDto dto = accountMapper.toDto(entity);

        // Assert
        assertThat(dto).isNotNull();
        assertThat(dto.getId()).isEqualTo(1L);
        assertThat(dto.getType()).isEqualTo(AccountType.SAVINGS);
        assertThat(dto.getBalance()).isEqualTo(1000.0);
        assertThat(dto.getStatus()).isEqualTo(AccountStatus.ACTIVE);
    }

    @Test
    void whenToEntity_withValidDto_shouldReturnCorrectEntity() {
        // Arrange
        AccountDto dto = new AccountDto();
        dto.setCustomerLegalId("7654321");
        dto.setType(AccountType.INVESTMENT);
        dto.setBalance(5000.0);
        dto.setStatus(AccountStatus.INACTIVE);

        // Act
        Account entity = accountMapper.toEntity(dto);

        // Assert
        assertThat(entity).isNotNull();
        assertThat(entity.getId()).isNull(); // ID is generated by the database, so it should be null here
        assertThat(entity.getType()).isEqualTo(AccountType.INVESTMENT);
        assertThat(entity.getBalance()).isEqualTo(5000.0);
        assertThat(entity.getStatus()).isEqualTo(AccountStatus.INACTIVE);
    }

    @Test
    void whenToDto_withNullEntity_shouldReturnNull() {
        assertThat(accountMapper.toDto(null)).isNull();
    }

    @Test
    void whenToEntity_withNullDto_shouldReturnNull() {
        assertThat(accountMapper.toEntity(null)).isNull();
    }

    @Test
    void whenUpdateAccountFromDto_shouldUpdateFieldsAndIgnoreId() {
        // Arrange
        AccountUpdateRequest updateRequest = new AccountUpdateRequest();
        updateRequest.setType(AccountType.SALARY);
        updateRequest.setBalance(20000.0);
        updateRequest.setStatus(AccountStatus.SUSPENDED);

        Account entity = new Account();
        entity.setId(1L);
        entity.setCustomerId(1234567L);
        entity.setType(AccountType.SAVINGS);
        entity.setBalance(1000.0);
        entity.setStatus(AccountStatus.ACTIVE);

        // Act
        accountMapper.updateAccountFromDto(updateRequest, entity);

        // Assert
        assertThat(entity.getId()).isEqualTo(1L); // ID should not change
        assertThat(entity.getType()).isEqualTo(AccountType.SALARY);
        assertThat(entity.getBalance()).isEqualTo(20000.0);
        assertThat(entity.getStatus()).isEqualTo(AccountStatus.SUSPENDED);
    }
}
