package com.bank.customer.model.mapper;

import com.bank.customer.model.dto.CustomerDto;
import com.bank.customer.model.entity.Customer;
import com.bank.customer.model.entity.CustomerType;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.assertThat;

class CustomerMapperTest {

    private CustomerMapper customerMapper;

    @BeforeEach
    void setUp() {
        // We test the generated implementation
        customerMapper = new CustomerMapperImpl();
    }

    @Test
    void whenToDto_withValidEntity_shouldReturnCorrectDto() {
        // Arrange
        Customer entity = new Customer();
        entity.setId(1L);
        entity.setName("Test Customer");
        entity.setLegalId("1234567");
        entity.setType(CustomerType.RETAIL);
        entity.setAddress("123 Main St");

        // Act
        CustomerDto dto = customerMapper.toDto(entity);

        // Assert
        assertThat(dto).isNotNull();
        assertThat(dto.getId()).isEqualTo(1L);
        assertThat(dto.getName()).isEqualTo("Test Customer");
        assertThat(dto.getLegalId()).isEqualTo("1234567");
        assertThat(dto.getType()).isEqualTo(CustomerType.RETAIL);
        assertThat(dto.getAddress()).isEqualTo("123 Main St");
    }

    @Test
    void whenToEntity_withValidDto_shouldReturnCorrectEntity() {
        // Arrange
        CustomerDto dto = new CustomerDto();
        dto.setName("Another Customer");
        dto.setLegalId("7654321");
        dto.setType(CustomerType.CORPORATE);
        dto.setAddress("456 Corp Ave");

        // Act
        Customer entity = customerMapper.toEntity(dto);

        // Assert
        assertThat(entity).isNotNull();
        assertThat(entity.getId()).isNull(); // ID is generated by the database, so it should be null here
        assertThat(entity.getName()).isEqualTo("Another Customer");
        assertThat(entity.getLegalId()).isEqualTo("7654321");
        assertThat(entity.getType()).isEqualTo(CustomerType.CORPORATE);
        assertThat(entity.getAddress()).isEqualTo("456 Corp Ave");
    }

    @Test
    void whenToDto_withNullEntity_shouldReturnNull() {
        assertThat(customerMapper.toDto(null)).isNull();
    }

    @Test
    void whenToEntity_withNullDto_shouldReturnNull() {
        assertThat(customerMapper.toEntity(null)).isNull();
    }

    @Test
    void whenUpdateCustomerFromDto_shouldUpdateFieldsAndIgnoreId() {
        // Arrange
        CustomerDto dto = new CustomerDto();
        dto.setName("Updated Name");
        dto.setLegalId("9876543");
        dto.setType(CustomerType.INVESTMENT);
        dto.setAddress(null); // Should be ignored

        Customer entity = new Customer();
        entity.setId(1L);
        entity.setName("Original Name");
        entity.setLegalId("1234567");
        entity.setType(CustomerType.RETAIL);
        entity.setAddress("Original Address");

        // Act
        customerMapper.updateCustomerFromDto(dto, entity);

        // Assert
        assertThat(entity.getId()).isEqualTo(1L); // ID should not change
        assertThat(entity.getName()).isEqualTo("Updated Name");
        assertThat(entity.getLegalId()).isEqualTo("9876543");
        assertThat(entity.getType()).isEqualTo(CustomerType.INVESTMENT);
        assertThat(entity.getAddress()).isEqualTo("Original Address"); // Null value from DTO should be ignored
    }
}